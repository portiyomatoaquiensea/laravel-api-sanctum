<?php
namespace App\Services;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use PDO;

class CustomerService
{
    public function __construct()
    {}

    public function uniqueCode($company_code = null)
    {
        if (!$company_code) {
            return false;
        }

        $maxAttempts = 5;
        $attempt = 0;
        
        do {
            $attempt++;
            // 1️⃣ Generate a random code in the format: [company_code][3 digits][1 letter][3 digits]
            $code = $company_code
                . rand(100, 999)       // first 3 digits
                . chr(rand(97, 122))   // random lowercase letter
                . rand(100, 999);      // last 3 digits
            try {
                // 2️⃣ Optimized existence check using raw SQL with TOP 1
                $query = "
                    SELECT TOP 1 1
                    FROM customers WITH (NOLOCK)
                    WHERE code = :code
                ";

                $stmt = DB::connection('main')->getPdo()->prepare($query);
                $stmt->bindParam(':code', $code, PDO::PARAM_STR);
                $stmt->execute();

                $exists = $stmt->fetch(PDO::FETCH_ASSOC) ? true : false;

                if (!$exists) {
                    // 3️⃣ Code is unique, return it
                    return $code;
                }

                // else: loop again to generate a new code

            } catch (\Exception $e) {
                continue;
            }
            // 4️⃣ Stop if max attempts reached
            if ($attempt >= $maxAttempts) {
                return false;
            }
        } while (true);
    }


    public function findReferral($ref = null)
    {
        if (!$ref) {
            return null;
        }

        $username = strtolower($ref);

        $query = "
            SELECT TOP 1
                id
            FROM customers WITH (NOLOCK)
            WHERE LOWER(username) = :username
            AND is_robot = 0
            AND blocked = 0
            AND deleted = 0
            AND status = 1
            AND is_parent = 1
        ";

        $stmt = DB::connection('main')->getPdo()->prepare($query);
        $stmt->bindParam(':username', $username, PDO::PARAM_STR);
        $stmt->execute();

        $customer = $stmt->fetch(PDO::FETCH_ASSOC);

        return $customer['id'] ?? null;
    }


    public function create(array $data)
    {
        if (!$data) {
            return false;
        }

        $pdo = DB::connection('main')->getPdo();

        // Prepare default/fixed values for required columns
        $id = null; // will be generated by DB
        $code = $data['code']; // example code
        $tmpId = 1;
        $status = $data['status'];
        $blocked = $data['blocked'];
        $deleted = $data['deleted'];
        $created = Carbon::now()->format('Y-m-d H:i:s');
        $modified = Carbon::now()->format('Y-m-d H:i:s');

        $stmt = $pdo->prepare("
            INSERT INTO customers (
                id,
                parent_id,
                company_id,
                category,
                is_new_member_send,
                is_referral_send,
                code,
                bank_id,
                session_id,
                tmp_id,
                currency_id,
                contact_id,
                username,
                password,
                phone_number,
                email,
                password_reset_token,
                account_name,
                account_number,
                game,
                contact_by,
                domain,
                login_ip,
                login_date,
                status,
                is_robot,
                blocked,
                point,
                deleted,
                is_referral,
                created,
                modified,
                company_account_id,
                is_wa,
                backup_phone,
                is_parent,
                register_ip,
                referrer_link,
                deposit_count,
                first_name,
                last_name,
                is_joined_bonus,
                lock_bonus_date,
                is_telegram,
                telegram_id
            )
            OUTPUT inserted.id
            VALUES (
                NEWID(),
                :parent_id,
                :company_id,
                :category,
                :is_new_member_send,
                :is_referral_send,
                :code,
                :bank_id,
                :session_id,
                :tmp_id,
                :currency_id,
                :contact_id,
                :username,
                :password,
                :phone_number,
                :email,
                :password_reset_token,
                :account_name,
                :account_number,
                :game,
                :contact_by,
                :domain,
                :login_ip,
                :login_date,
                :status,
                :is_robot,
                :blocked,
                :point,
                :deleted,
                :is_referral,
                :created,
                :modified,
                :company_account_id,
                :is_wa,
                :backup_phone,
                :is_parent,
                :register_ip,
                :referrer_link,
                :deposit_count,
                :first_name,
                :last_name,
                :is_joined_bonus,
                :lock_bonus_date,
                :is_telegram,
                :telegram_id)");

        $stmt->execute([
            ':parent_id' => $data['parent_id'] ?? null,
            ':company_id' => $data['company_id'] ?? null,
            ':category' => $data['category'] ?? null,
            ':is_new_member_send' => $data['is_new_member_send'] ?? null,
            ':is_referral_send' => $data['is_referral_send'] ?? null,
            ':code' => $code,
            ':bank_id' => $data['bank_id'] ?? null,
            ':session_id' => $data['session_id'] ?? null,
            ':tmp_id' => $tmpId,
            ':currency_id' => $data['currency_id'] ?? null,
            ':contact_id' => $data['contact_id'] ?? null,
            ':username' => $data['username'] ?? null,
            ':password' => $data['password'] ?? null,
            ':phone_number' => $data['phone_number'] ?? null,
            ':email' => $data['email'] ?? null,
            ':password_reset_token' => $data['password_reset_token'] ?? null,
            ':account_name' => $data['account_name'] ?? null,
            ':account_number' => $data['account_number'] ?? null,
            ':game' => $data['game'] ?? null,
            ':contact_by' => $data['contact_by'] ?? null,
            ':domain' => $data['domain'] ?? null,
            ':login_ip' => $data['login_ip'] ?? null,
            ':login_date' => $data['login_date'] ?? null,
            ':status' => $status,
            ':is_robot' => $data['is_robot'] ?? null,
            ':blocked' => $blocked,
            ':point' => $data['point'] ?? null,
            ':deleted' => $deleted,
            ':is_referral' => $data['is_referral'] ?? null,
            ':created' => $created,
            ':modified' => $modified,
            ':company_account_id' => $data['company_account_id'] ?? null,
            ':is_wa' => $data['is_wa'] ?? null,
            ':backup_phone' => $data['backup_phone'] ?? null,
            ':is_parent' => $data['is_parent'] ?? null,
            ':register_ip' => $data['register_ip'] ?? null,
            ':referrer_link' => $data['referrer_link'] ?? null,
            ':deposit_count' => $data['deposit_count'] ?? null,
            ':first_name' => $data['first_name'] ?? null,
            ':last_name' => $data['last_name'] ?? null,
            ':is_joined_bonus' => $data['is_joined_bonus'] ?? null,
            ':lock_bonus_date' => $data['lock_bonus_date'] ?? null,
            ':is_telegram' => $data['is_telegram'] ?? 0,
            ':telegram_id' => $data['telegram_id'] ?? null,
        ]);
        // Fetch the DB-generated UUID
        $newId = $stmt->fetchColumn();

        return $newId;
    }

    public function createCustomerPDO(array $data = [])
    {
        if (!$data) {
            return false;
        }

        $pdo = DB::connection('main')->getPdo(); // Get raw PDO connection
        $table = 'customers';
        

        // Add required columns
        // $data['id'] = $newId;
        $data['created'] = Carbon::now()->format('Y-m-d H:i:s');
        $data['modified'] = Carbon::now()->format('Y-m-d H:i:s');

        // Build query dynamically based on $data keys
        $columns = implode(', ', array_keys($data));
        $placeholders = ':' . implode(', :', array_keys($data));

        $query = "INSERT INTO $table ($columns) VALUES ($placeholders)";
        
        try {
            $pdo->beginTransaction();
            $stmt = $pdo->prepare($query);

            // Bind values
            foreach ($data as $key => $value) {
                $stmt->bindValue(':'.$key, $value);
            }

            $stmt->execute();
            $lastInsertId = $pdo->lastInsertId();

            $pdo->commit();

            return $lastInsertId;
        } catch (\PDOException $e) {
            $pdo->rollBack();
            return false;
        }
    }

    public function updatePassword(string $customerId, string $newPassword)
    {
        if (!$customerId || !$newPassword) {
            return false;
        }
        try {
            $hashedPassword = Hash::make($newPassword);
            $date = Carbon::now()->format('Y-m-d H:i:s');
            $affected = DB::connection('main')->update(
                "UPDATE customers 
                SET password = :new_password,
                modified = :modified 
                WHERE id = :customer_id",
                [
                    'new_password' => $hashedPassword,
                    'modified'   => $date,
                    'customer_id'   => $customerId,
                ]
            );
            if ($affected > 0) {
                return true;
            }
            return false;
        } catch (\Throwable $e) {
            return false;
        }
    }

    public function updateJoinBonus(string $customerId)
    {
        if (!$customerId) {
            return false;
        }
        try {
            $date = Carbon::now()->format('Y-m-d H:i:s');
            $affected = DB::connection('main')->update(
                "UPDATE customers 
                SET is_joined_bonus = :is_joined_bonus,
                lock_bonus_date = :lock_bonus_date,
                modified = :modified 
                WHERE id = :customer_id",
                [
                    'is_joined_bonus' => 1,
                    'lock_bonus_date' => $date,
                    'modified'   => $date,
                    'customer_id'   => $customerId,
                ]
            );
            if ($affected > 0) {
                return true;
            }
            return false;
        } catch (\Throwable $e) {
            return false;
        }
    }
}